<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--
         =================
         THE PROJECT PART
         =================
          → Projektinformationen
     -->
    <!-- Hier sind allgemeine Projektspezifische Dinge aufgelistet -->
    <groupId>com.blackout</groupId>
    <artifactId>BlackoutApplication</artifactId>
    <version>1.0.0</version>
    <name>BlackoutApplication</name>

    <!-- Properties bieten die Möglichkeit Properties für die Plugins zu setzen oder eigene zu erstellen -->
    <properties>
        <jar-name>${artifactId}-${version}</jar-name>
        <!-- PLUGIN PROPERTIES -->
        <!-- Welche Kodierung haben die Quelldateien -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- Properties für den Maven Kompilierer
            → In welcher Version wurde entwickelt
            → zu welcher Version soll kompiliert werden
            -->
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <!-- EIGENE PROPERTIES -->
        <!-- Welche Version sollen die Dependencies/Plugins haben
        (Variable können mit ${} referenziert werden) -->
        <junit.version>5.9.2</junit.version>

        <!-- COMPILER Plugins -->
        <maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
        <maven-surefire.version>3.0.0-M7</maven-surefire.version>
        <exec-maven.version>3.1.0</exec-maven.version>
        <maven-shade-plugin.version>3.4.1</maven-shade-plugin.version>

        <javafx-maven-plugin.version>0.0.8</javafx-maven-plugin.version>
        <maven-antrun-plugin.version>3.0.0</maven-antrun-plugin.version>
        <maven-dependency-plugin.version>3.2.0</maven-dependency-plugin.version>
        <maven-jar-plugin.version>3.2.1</maven-jar-plugin.version>
        <exec-maven-plugin.version>3.0.0</exec-maven-plugin.version>

        <sonar-maven-plugin.version>3.9.1.2184</sonar-maven-plugin.version>
        <maven-checkstyle-plugin.version>3.2.1</maven-checkstyle-plugin.version>

        <!-- Startklasse für JavaFX -->
        <main.class>com.blackout.AppStarter</main.class>
        <launcher.class>com.blackout/com.blackout.AppStarter</launcher.class>

        <!-- Setup for the RaspPi -->
        <pi.username>pi</pi.username>
        <pi.password>crowpi</pi.password>
        <pi.ipnumber/>
        <pi.port>22</pi.port>
        <pi.deploydirectory>/home/pi/deploy</pi.deploydirectory>
        <pi.remote.jvmOptions/>

        <!-- Ant Dependencies -->
        <ant-jsch.version>1.10.9</ant-jsch.version>
    </properties>

    <!--
         ===============
         THE MAVEN PART
         ===============
          → spezifizieren wie der Build abläuft (Plugins usw.)
     -->
    <build>
        <finalName>${jar-name}</finalName>
        <plugins>
            <!-- Das Sonar Plugin wird benötigt, um die Codeanalyse durchzuführen -->
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar-maven-plugin.version}</version>
            </plugin>
            <!-- Das Maven Compiler Plugin wird benötigt, um den Source Code für das Maven Projekt zu kompilieren  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <compilerArgs>
                        <!-- Prevents recompilation due to missing package-info.class, see
                            MCOMPILER-205 -->
                        <arg>-Xpkginfo:always</arg>
                    </compilerArgs>
                </configuration>
                <!-- Source und Target sind unter Properties definiert -->
            </plugin>

            <!-- Maven Surefire Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire.version}</version>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <mainClass>${main.class}</mainClass>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <configuration>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <transformers>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <manifestEntries>
                                <Main-Class>${main.class}</Main-Class>
                            </manifestEntries>
                        </transformer>
                    </transformers>
                    <filters>
                        <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                                <exclude>module-info.class</exclude>
                                <exclude>META-INF/MANIFEST.MF</exclude>
                                <exclude>META-INF/*.SF</exclude>
                                <exclude>META-INF/*.DSA</exclude>
                                <exclude>META-INF/*.RSA</exclude>
                            </excludes>
                        </filter>
                    </filters>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <!-- Das Checkstyle Plugin wird benötigt um zu überprüfen, ob die Coding rules eingehalten wurden. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <configLocation>checkstyle.xml</configLocation>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- scripts rüberkopieren -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.2</version>
                <executions>
                    <execution>
                        <id>copy-scripts</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/scripts</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>scripts</directory>
                                    <includes>
                                        <include>config.sh</include>
                                        <include>start.desktop</include>
                                        <include>start.sh</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${maven-antrun-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven-dependency-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${exec-maven-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>


    <profiles>
        <profile>
            <id>jfx-remote-run-X11</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Ensure target directory exists on RaspPi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}"
                                                 trust="true"
                                                 command="mkdir --parents ${pi.deploydirectory}; rm -f ${pi.deploydirectory}/*"/>

                                        <!-- Transfer jar to RaspPi via SCP -->
                                        <scp trust="true"
                                             file="${project.build.directory}/${jar-name}.jar"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                        </scp>

                                        <!-- Transfer script to RaspPi via SCP -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/scripts"/>
                                        </scp>

                                        <!-- Stop all running Java processes -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 suppresssystemerr="true" suppresssystemout="true"
                                                 command="sudo killall -9 java"/>

                                        <!-- Run JFX application on Raspberry Pi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="DISPLAY=:0 XAUTHORITY=/home/pi/.Xauthority sudo -E java -Xms2G -Xmx4G -Dglass.platform=gtk -jar ${pi.deploydirectory}/${jar-name}.jar"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>desktop</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>pi</id>
        </profile>
    </profiles>

    <!--
        ============================
        THE RUNTIME DEPENDENCY PART
        ============================
         → In den Dependencies werden alle Abhängigkeiten von Software-libraries aufgelistet, welche für das Projekt benötigt werden
     -->
    <dependencies>
        <!-- JUnit wird benötigt um Unittest schreiben zu können -->
        <dependency>
            <!-- Java stuff wie GroupId ArtifactId und Version setzen -->
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <!-- Bereich, indem die Dependency benötigt wird.
             Bsp. JUnit soll ja nur für die Tests und nicht für das Endprodukt verwendet werden -->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-core</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-raspberrypi</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-pigpio</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-mock</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.10.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>3.5.1</version>
        </dependency>
        <dependency>
            <groupId>com.solvoj.zxing-java6</groupId>
            <artifactId>javase-java6</artifactId>
            <version>3.2.0</version>
        </dependency>
    </dependencies>
</project>